---
groups:
- name: payment-jobs
  jobs:
  - build-payment
  - deploy-payment-to-stage
  - execute-payment-load-tests
  - validate-payment-load-test
  - build-payment-test-image
  - execute-payment-functional-tests
  - deploy-payment-to-prod
  - promote-new-version-payment

- name: init-dynatrace
  jobs: 
  - init-dynatrace-payment

resource_types:
- name: dynatrace-resource
  type: docker-image
  source:
    repository: mvilliger/dynatrace-resource

resources:
# GitHub Repositories
- name: git-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/acm-workshop-concourse/sockshop.git

- name: git-payment
  type: git
  source:
    branch: master
    uri: https://github.com/acm-workshop-concourse/payment.git

- name: dynatrace
  type: dynatrace-resource
  source:
    apitoken: ((apitoken))
    tenanthost: ((tenanthost))
# Docker Images

- name: payment-image
  type: docker-image
  source:
    repository: ((docker-hub-username))/payment
    username: ((docker-hub-username))
    password: ((docker-hub-password))

- name: payment-test-image
  type: docker-image
  source:
    repository: ((docker-hub-username))/payment-test
    username: ((docker-hub-username))
    password: ((docker-hub-password))

# PCF Environments

- name: pcf-stage
  type: cf
  source:
    api: ((pcf-stage-api))
    username: ((pcf-stage-deploy-username))
    password: ((pcf-stage-deploy-password))
    organization: ((pcf-stage-organization))
    space: ((pcf-stage-space))
    skip_cert_check: false

- name: pcf-production
  type: cf
  source:
    api: ((pcf-prod-api))
    username: ((pcf-prod-deploy-username))
    password: ((pcf-prod-deploy-password))
    organization: ((pcf-prod-organization))
    space: ((pcf-prod-space))
    skip_cert_check: false

jobs:

# Initialize Dynatrace Custom Device

- name: init-dynatrace-payment
  public: true
  plan:
  - aggregate:
    - get: git-pipeline
    - get: git-payment 
  - task: init-dynatrace-task
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/init-dynatrace-task.yml
    params: 
      apitoken: ((apitoken))
      tenanthost: ((tenanthost))
      APP_REPO: git-payment

# payment

- name: build-payment
  plan:
  - get: git-payment
    trigger: true
  - task: copy-dockerfile
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: busybox}
      inputs:
      - name: git-payment
      outputs:
      - name: workspace
      run:
        path: /bin/sh
        args:
        - -exc
        - |
          output_dir=workspace
          rm git-payment/Dockerfile
          cp git-payment/docker/payment/Dockerfile git-payment/
          cp -R git-payment/. "${output_dir}/"
  - put: payment-image
    params:
      build: workspace
      cache_tag: latest

- name: build-payment-test-image
  serial: true
  public: true
  plan:
  - get: git-payment
  - put: payment-test-image
    params:
      build: git-payment
      cache_tag: latest

- name: deploy-payment-to-stage
  serial: true
  public: true
  plan:
  - get: git-payment
    trigger: true
    passed:
      - build-payment
  - get: git-pipeline
    trigger: false      
  - task: prepare-app-manifest
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/app-manifest-prep.yml
    params:
      PCF_APP_SUFFIX: ((pcf-stage-payment-suffix)) 
      DOCKER_HUB_ACCOUNT: ((docker-hub-username))
      APP_REPO: git-payment
  - put: dynatrace
    params:
      monspecserviceenvironment: payment/Staging
      pipelinetaskname: deploy-payment-to-stage
      deployversion: v1.0
      APP_REPO: git-payment 
  - put: pcf-stage
    params:
      manifest: app-manifest-output/manifest.yml  
  
- name: execute-payment-functional-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-payment
      trigger: true
      passed:
        - deploy-payment-to-stage
    - get: payment-test-image
      passed:
        - build-payment-test-image
  - task: run-functional-tests
    image: payment-test-image
    config:
      platform: linux
      inputs:
      - name: git-payment
      run:
        dir: git-payment
        path: /bin/sh
        args:
        - -c
        - |
          go test api/endpoints_test.go
- name: deploy-payment-to-prod
  serial: true
  public: true
  plan:
  - get: git-payment
    trigger: true
    passed:
      - execute-payment-functional-tests 
  - get: git-pipeline
    trigger: false
  - task: get-current-app-color
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))              
  - task: prepare-app-manifest
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/app-manifest-prep.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix)) 
      DOCKER_HUB_ACCOUNT: ((docker-hub-username))
      APP_REPO: git-payment
      PRODUCTION: true       
  - put: dynatrace
    params:
      monspecserviceenvironment: payment/Production
      pipelinetaskname: deploy-payment-to-prod
      deployversion: v1.0 
      APP_REPO: git-payment      
  - put: pcf-production
    params:
        manifest: app-manifest-output/manifest.yml 

- name: execute-payment-load-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-payment
      trigger: true
      passed:
        - deploy-payment-to-prod
    - get: payment-test-image
      passed:
        - build-payment-test-image
    - get: git-pipeline
      trigger: false        
  - task: get-current-app-color
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))           
  - task: run-load-tests
    image: payment-test-image
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/load-tests.yml
    params:
      APP_REPO: git-payment
      PRODUCTION: true
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_APP_DOMAIN: ((pcf-prod-app-domain))   
  - task: push-dynatrace-monspec-data
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/push-dynatrace-monspec-data.yml
    params: 
      monspecserviceenvironment: payment/Production-$NEXT_APP_COLOR
      apitoken: ((apitoken))
      tenanthost: ((tenanthost))
      APP_REPO: git-payment   

- name: validate-payment-load-test
  serial: true
  public: true
  plan:
  - get: git-payment
    trigger: true
    passed:
      - execute-payment-load-tests
  - get: git-pipeline
    trigger: false      
  - task: get-current-app-color
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))       
  - task: validate-via-monspec
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/validate-via-monspec.yml
    params: 
      monspeccomparison: payment/Production-$NEXT_APP_COLOR\ToProduction-$CURRENT_APP_COLOR\Last5m
      apitoken: ((apitoken))
      tenanthost: ((tenanthost))
      APP_REPO: git-payment     


- name: promote-new-version-payment
  serial: true
  public: true
  plan:
  - get: git-payment
    trigger: true
    passed:
      - validate-payment-load-test
  - get: git-pipeline
    trigger: false      
  - task: get-current-app-color
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))   
  - task: switch-app-routes
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/update-routes.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-payment-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))
      PCF_APP_DOMAIN: ((pcf-prod-app-domain))              
